@startuml
'https://plantuml.com/sequence-diagram

autonumber

actor User
boundary JamSketch
control JamSketchEngineX
control JamSketchController
entity MusicData
control "MusicCalculator\nfor OUTLINE_LAYER"
control "MusicCalculator\nfor MELODY_LAYER"
entity SCCDataSet.Part
entity MusicRepresentation
entity "AbstractMusicLayer\nfor OUTLINE_LAYER"
entity "AbstractMusicLayer\nfor MELODY_LAYER"
entity "MusicElement\nfor OUTLINE_LAYER"
entity "MusicElement\nfor MELODY_LAYER"

JamSketch -> JamSketchEngineX: init()
JamSketchEngineX -> MusicRepresentation: addMusicCalculator(MELODY_LAYER)
User -> JamSketch: Draw a curve
JamSketch -> JamSketchController: updateCurve()
JamSketchController -> MusicData: storeCursorPosition()
JamSketchController -> JamSketchEngineX: setMelodicOutline()
JamSketchEngineX -> "MusicElement\nfor OUTLINE_LAYER": setEvidence()
"MusicElement\nfor OUTLINE_LAYER" -> "AbstractMusicLayer\nfor OUTLINE_LAYER": update()
note over "AbstractMusicLayer\nfor OUTLINE_LAYER"
    Do nothing
end note
JamSketchEngineX -> JamSketchEngineX: outlineUpdated()
JamSketchEngineX -> "MusicCalculator\nfor OUTLINE_LAYER": updated()
'MusicElement -> MusicElement: parent()
"MusicCalculator\nfor OUTLINE_LAYER" -> "MusicElement\nfor MELODY_LAYER": setEvidence()
"MusicElement\nfor MELODY_LAYER" -> "AbstractMusicLayer\nfor MELODY_LAYER": update()
"AbstractMusicLayer\nfor MELODY_LAYER" -> "MusicCalculator\nfor MELODY_LAYER": updated()
"MusicCalculator\nfor MELODY_LAYER" -> SCCDataSet.Part: remove()
"MusicCalculator\nfor MELODY_LAYER" -> SCCDataSet.Part: addNoteElement()
'AbstractMusicLayer -> "MusicCalculator\nfor MELODY_LAYER": updated()

'JamSketchEngineSimple -> JamSketchEngineSimple: outlineUpdated(measure, tick)

@enduml