@startuml
'https://plantuml.com/class-diagram
hide empty members

interface cmx.inference.MusicRepresentation {
    addMusicLayer(String var1, List<Object> var2)
    addMusicLayer(String var1, List<Object> var2, int var3)
    addMusicLayerCont(String var1)
}
class cmx.inference.MusicRepresentationImpl implements cmx.inference.MusicRepresentation {
    HashMap<String, AbstractMusicLayer> name2layer
}
abstract class cmx.inference.AbstractMusicLayer {
    String name // OUTLINE_LAYER, MELODY_LAYER, CHORD_LAYER
    MusicElement[] elements
    List<MusicCalculator> calculators
}
class cmx.inference.MusicLayer extends cmx.inference.AbstractMusicLayer
class cmx.inference.MusicLayerCont extends cmx.inference.AbstractMusicLayer
MusicRepresentationImpl "1" +-- "0..*" AbstractMusicLayer
'MusicRepresentationImpl "1" +-- "0..*" MusicLayer

interface cmx.inference.MusicElement {
    setEvidence(Object var1)
}
abstract class cmx.inference.AbstractMusicElementImpl implements cmx.inference.MusicElement
class cmx.inference.MusicElementImpl extends cmx.inference.AbstractMusicElementImpl
class cmx.inference.MusicElementContImpl extends cmx.inference.AbstractMusicElementImpl
MusicRepresentationImpl +-- AbstractMusicElementImpl
AbstractMusicLayer "1" -- "0..*" MusicElement

abstract class JamSketchEngineAbstract implements JamSketchEngine {
    OUTLINE_LAYER: String = "curve"
    MELODY_LAYER: String = "melody"
    CHORD_LAYER: String = "chord"
}

class JamSketchEngineX implements JamSketchEngineAbstract{}
JamSketchEngineX --> MusicRepresentation : addMusicLayer(MELODY_LAYER, Object[])
JamSketchEngineX --> MusicRepresentation : addMusicLayer(CHORD_LAYER, Object[], division)
JamSketchEngineX --> MusicRepresentation : addMusicLayerCont(OUTLINE_LAYER)

@enduml